#!/usr/bin/env perl

#use strict;
use warnings;
use Getopt::Std;
use Time::Piece;

sub warn {
	printf(STDERR "%s:%d: %s: %s\n",
		(caller())[0], __LINE__, $_[1], $_[0]);
}

sub die {
	&warn($_[0], $_[1]);
	exit 1;
}

sub get_date {
	my $t = Time::Piece->strptime($_[0], "$_[1]\n");

	return $t->strftime("$opts{f}\n");
}

sub get_size {
	@units = ( B, KB, MB, GB, TB );
	$e = log($_[0]) / log(1024);
	$size = $_[0] / (1024 ** $e);

	return "$size $units[$e+1]";
}

sub proc_vars {
	$date = $_[0];
	$file = $_[0];
	$user = $_[0];

	if ($opts{f} eq $nicotine) {
		($strtr = $_[0]) =~ s/ Upload.*//;
		$str1 =~ s/^$strtr//;
		$str1 =~ s/Upload started/Upload finished/g;
		($strtr = $_[1]) =~ s/ Upload.*//;
		$str2 =~ s/^$strtr//;
		return
			if ($str1 ne $str2);

		$date =~ s/ Upload.*//;
		$date = get_date($date, '%Y-%m-%d %T');
		$file =~ s/.*, file //;
		$file =~ s/.*?\\//;
		$user =~ s/.*: user //;
		$user =~ s/,.*//;
	} else {
		return
			if ($_[1] !~ /   Queued$/);

		$date =~ s/\[//;
		$date =~ s/\].*//;
		$date = get_date($date, '%a %b %e %T %Y');
		$musicdir = $ENV{'XDG_MUSIC_DIR'};
		$musicdir =~ s/\/.*?//;
		$file =~ s/.*for file @@[a-z]{5}\\//;
		$user =~ s/.*requested by //;
		$user =~ s/ for file.*//;
	}
	$file =~ s/\\/\//g;
	$file = "$musicdir/$file";

	return ( $date, $file, $user );
}

sub print {
	$r = 0;

	for ($i = 0; $i < $#filec; $i++) {
		#my ($date, $file, $user) = proc_vars($filec[$i], $filec[$i+1]) || next;
		my $user = proc_vars($filec[$i], $filec[$i+1]);

		print($user);
		#printf("[%s] Uploaded %s requested by %s\n",
		#	$date, $file, $user);
		$r++;
	}

	if ($r != 0) {
		return;
	} else {
		&die($opts{f}, 'no uploaded files found');
	}
}

sub main {
	$datadir = $ENV{'XDG_DATA_HOME'} || "$ENV{'HOME'}/.local/share";
	($prog = $0) =~ s|.*/||;
	#$progdir = "$datadir/$prog";
	$progopts = 'cd:f:F:i';
	$nicotine = "$datadir/nicotine/logs/transfers/transfers.log";

	getopts($progopts, \%opts);

	@funcs = ( 'asd', 123, 'print');
	$pat = join('|', @funcs);
	if ($ARGV[0] !~ /($pat)/) {
		$ARGV[0] && &warn($ARGV[0], 'command not found');
		printf(STDERR 'Usage: %s [-%s] %s

-f Use another file (falls back to Nicotine+)
-F Script file for custom commands
-h Print this message

proc_stats:
-c Process a CSV file instead

print:
-d Date format

stats:
-i Print file size and downloads along with total size
', $prog, $progopts, $pat);
		exit 2;
	}

	open($in, '<', $opts{f} ||= $nicotine) ||
		&die($opts{f}, $!);
	$i = 0; while (<$in>) {
		$filec[$i] = $_
			if (/(Upload (started|finished): user|Queue upload requested by |    Queued)/);
		$i++;
	}

	$ARGV[0]->() || usage();
}

main(@ARGV);
