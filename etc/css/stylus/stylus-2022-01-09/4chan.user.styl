/* ==UserStyle==
@name					 	4chan
@namespace			github.com/openstyles/stylus
@version				1.0.0
@description		A new userstyle
@author				 	Me

@preprocessor stylus

@var text arrow-size "Arrow size (on error)" 8px
==/UserStyle== */

@keyframes dropfade {
	0% {
		opacity: 0;
		transform: translateY(-10px);
	}

	100% {
		opacity: 1;
		transform: translateY(0);
	}
}

svar(var) {
	s('var(--%s)', var);
}

clr(n) {
	color: s('var(--color%s)', n);
}

bgc(n1 =, n2 =) {
	background-color: s('var(--bg%s)', n1);
	color: s('var(--fg%s)', n2);
}

brd(pos =, color = border, radius = false) {
	{pos ? s('border-%s', pos) : 'border'}: var(--border-width) solid svar(color);

	if (radius || !pos) {
		border-radius: var(--border-radius);
	}
}

box(w, h = w, i = false) {
	i = (i || h == true) ? !important : null;
	h = w == h ? w : h is a 'unit' ? h : w;

	width: w i;
	height: h i;
}

pos(offset = 0) {
	left: offset;
	top: offset;
	right: offset;
	bottom: offset;
}

anim(e = \&, name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{e} {
			{name ? animation : transition}: name var(--trans-dur) func;
		}
	}
}

dropfade(e = \&) {
	anim(e, dropfade, cubic-bezier(.2, .9, .6, 1));
}

focus(i = null) {
	i = i ? !important : null;

	anim();

	&:focus {
		border-color: var(--hl) i;
		box-shadow: var(--shadow-ins) var(--hl) i;
		outline: none;
	}
}

normalise-select(e = \&) {
	{e} {
		appearance: none;
		bgc(2);
		background-image:
			linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
			linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
			linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%);
		background-size: 20px 20px;
		background-repeat: no-repeat;
		background-position: right 4px;
		padding: 0 20px 0 var(--pad);
		brd();
		height: 28px;
		focus();
	}
}

normalise-input(e = \&) {
	{e} {
		bgc(2);
		padding: 0 var(--pad);
		brd();
		height: 28px;
		focus();

		&::placeholder {
			color: var(--fg3);
		}
	}
}

normalise-button(e = \&) {
	{e} {
		background: none var(--bg2);
		color: var(--fg);
		padding: 0 calc(var(--pad) * 2);
		brd();
		height: 28px;
		cursor: pointer;
		focus();

		&:disabled {
			opacity: .5;
			pointer-events: none;
		}
	}
}

normalise-checkbox(e = \&) {
	/label {
		display: flex;
		align-items: center;
		gap: 1ch;
	}

	{e} {
		appearance: none;
		background-color: var(--bg2);
		brd();
		border-radius: calc(var(--border-radius) * .33);
		box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
		margin: 0;
		position: relative;
		box(16px);
		focus();

		&::before, &::after {
			content: '';
			position: absolute;
			pos();
			background-color: var(--hl);
			transform-origin: 0 0;
		}

		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0);
		}
		&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0);
		}
		&:indeterminate::before {
			transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25);
			transition-duration: 33.33333333ms;
		}

		&:checked {
			&::before {
				transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4);
				transition-duration: 33.33333333ms;
			}
			&::after {
				transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2);
				transition-delay: 33.33333333ms;
				anim();
			}
		}
	}
}

replace-text(content =, text-color = fg, pos = after) {
	letter-spacing: -9999px;
	color: transparent;

	if (content) {
		// Replace
		&::{pos} {
			content: content;
			letter-spacing: 0;
			color: svar(text-color);
		}
	} else {
		// Hide
		* {
			letter-spacing: 0;
			color: svar(text-color);
		}
	}
}

@-moz-document domain("4chan.org"), domain("4channel.org") {
	/* Variables */
	@media (prefers-color-scheme: light) { :root {
		--img: url('https://images.unsplash.com/photo-1551001626-86e913f8baf7');
	}}
	@media (prefers-color-scheme: dark) { :root {
		--img: url('https://github.com/eXo-Necro/Files/blob/master/4chan/Trefle-background.jpg?raw=true');
	}}
	:root {
		--icon-size: 8px;
		settings = \
			'arrow-size'

		for i in settings {
			\-\-{i}: convert(i);
		}
	}

	/* Remove elements */
	// I. IDK
	#js-snowfield,
	#tooltip,

	// II. Buttons?
	#t-help,
	.open-qr-wrap,
	[accesskey="a"],
	#settings > .btn-wrap,

	// III. Top
	#toggleMsgBtn, #globalMessage, .middlead + hr, form + hr,
	.abovePostForm, .aboveMidAd,
	#togglePostFormLink,
	.middlead,
	#blotter,

	// IV. Bottom
	#boardNavDesktopFoot,
	#bottomReportBtn,
	.stylechanger,
	#absbot,

	// V. Post
	.sideArrows,
	.postMenuBtn,
	.postInfo input
	{
		display: none !important;
	}

	/* Board title image */
	#bannerCnt {
		visibility: hidden;
		border: none;
		margin: 0;
		height: 0;

		&::before {
			content: '';
			position: absolute;
			left: 0;
			right: 0;
			height: calc(var(--pad) * 9 + var(--font-size));
			z-index: -1;
			visibility: visible;
			background-position: 0 70%;
			background-size: cover;
			background-repeat: no-repeat;
			background-image: linear-gradient(
				to top,
				var(--bg) 0%,
				transparent 100%
			), var(--img);
		}
	}
	.boardTitle {
		color: var(--fg) !important;
		letter-spacing: 0 !important;
		font-weight: unset !important;
		padding-top: calc(var(--pad) * 4);
		padding-bottom: calc(var(--pad) * 3);
	}

	/* Global */
	body {
		background: none var(--bg);
		color: var(--fg);
		padding: var(--body-pad);
		margin: 0;
	}

	hr {
		brd(top);
		margin: var(--pad) calc(var(--pad) * -1);
	}

	input[type="checkbox"] {
		normalise-checkbox();
	}
	input[type="submit"] {
		normalise-button();
	}
	select {
		normalise-select();
	}
	.navLinks label {
		gap: .5ch;
		replace-text('Auto-update');
	}

	#boardNavDesktop {
		background-color: var(--accent);
		color: var(--fg) !important;
		padding: var(--body-pad);
		margin: calc(var(--body-pad) * -1) calc(var(--body-pad) * -1) 0 calc(var(--body-pad) * -1);
		brd(bottom, accent-border);
		box-shadow: var(--shadow-mid);

		a {
			padding: 0 !important;
		}
	}

	#togglePostFormLink {
		display: flex;
		color: transparent;
		font-weight: unset;
		margin-bottom: calc(var(--pad) * 2);

		a {
			normalise-button();
			color: var(--fg) !important;
			margin: auto;
			display: flex;
			align-items: center;

			&:hover {
				text-decoration: none;
			}
		}
	}

	#ctrl,
	.navLinks {
		display: flex;
		align-items: center;
	}
	#ctrl {
		justify-content: space-between;
	}
	.navLinks {
		replace-text();

		a:not(.button) {
			&::before, &::after {
				display: inline-block;
				color: var(--fg);
			}

			&::before { content: '['; }
			&::after { content: ']\00a0'; }
		}

		& > span:not(.btn-wrap):not(:empty) {
			position: relative;

			&::before { content: '\00a0('; }
			&::after { content: ')'; }
		}
	}
	#info .btn-wrap::after {
		content: ']\00a0'
	}
	.open-qr-wrap {
		color: transparent !important;
	}
	.tu-error {
		&::before {
			content: '';
			position: absolute;
			right: 0;
			box(8ch, var(--font-size));
			background-color: var(--bg);
		}

		&::after {
			content: ')';
			color: var(--fg);
		}
	}
	.thread-stats,
	#settings {
		display: initial;
		position: absolute;
		right: var(--body-pad);
		margin: 0;
	}
	.thread-stats > ::before {
		content: attr(data-tip)': ';
	}

	.bottomCtrl {
		margin-top: calc(var(--body-pad) + 6px);
		margin-bottom: calc(var(--body-pad) - (var(--body-pad) - 6px));
		float: none;
	}
	.deleteform {
		width: calc(100% - var(--body-pad) * 2 - var(--pad) * 3 - var(--border-width) * 2 - 6ch);
		display: inline-flex;
		align-items: center;
		justify-content: end;
		replace-text();

		&::before {
			content: 'Delete post:\00a0';
			color: var(--fg);
			letter-spacing: 0;
		}

		&::after {
			content: '\00a0 File only';
			letter-spacing: 0;
			color: var(--fg);
		}

		input[type="submit"] {
			position: absolute;
			right: var(--body-pad);
		}
	}

	/* Floating panels */
	#quickReply {
		background-color: var(--bg3) !important;
		padding: 0 !important;
		brd(, accent-border);
		box-shadow: var(--shadow-big);
	}

	#twHeader {
		background-color: var(--bg2) !important;
		font-weight: unset;
		padding: var(--pad) 0;
		brd(bottom,, false);
		border-radius: var(--border-radius) var(--border-radius) 0 0;
		height: unset;
	}
	#watchList li {
		padding: 0 var(--pad);

		&:first-child {
			border: none !important;
			padding-top: 0;
			margin: 0;
		}
	}

	#quickReply {
		input[type="text"] {
			normalise-input();
		}
		textarea {
			bgc(2);
			padding: var(--pad);
			brd();
		}
		input[type="text"], textarea {
			margin-bottom: var(--pad) !important;
			transition-property: border-color !important;
			focus(true);
		}
		input[type="submit"] {
			width: unset;
		}
	}
	#qr {
		&Form {
			padding: var(--pad);
			position: relative;

			& > :last-child {
				overflow: hidden;
			}
		}
		&Header {
			background-color: var(--accent) !important;
			font-weight: unset;
			padding: var(--pad) 0;
			brd(bottom, accent-border);
			border-radius: var(--border-radius) var(--border-radius) 0 0;
			height: unset;
			line-height: unset;
			replace-text('Reply to thread #', fg, before)
		}
		&Tid {
			color: var(--fg);
			letter-spacing: 0;
		}
		&Close {
			position: absolute;
			top: calc(var(--pad) - 1px);
			right: calc(var(--pad) - 1px);

			box-sizing: border-box;
			background-image: s("url('data:image/svg+xml,%s')", unquote('<svg xmlns="http://www.w3.org/2000/svg" version="1.0" width="8" height="8" viewBox="0 0 8 8"><style> rect { width: 1px; height: 1px; } </style><rect x="1" y="1"/><rect x="2" y="2"/><rect x="5" y="2"/><rect x="6" y="1"/><rect x="3" y="3"/><rect x="4" y="3"/><rect x="3" y="4"/><rect x="4" y="4"/><rect x="2" y="5"/><rect x="1" y="6"/><rect x="5" y="5"/><rect x="6" y="6"/></svg>'));
			background-repeat: no-repeat;
			background-position: center;
			padding-left: var(--icon-size);
			border-radius: var(--border-radius);
			box(var(--icon-size));

			&:hover {
				background-color: var(--bg4);
			}
		}
		&CaptchaContainer {
			background-color: unset !important;
			margin-bottom: var(--pad);
		}
		&File {
			width: unset;
			cursor: pointer;
			position: absolute;
			bottom: var(--pad);
		}
		&Error {
			background-color: var(--hl-error);
			text-shadow: none;
			padding: var(--pad);
			border-radius: var(--border-radius);
			box-shadow: var(--shadow-big);
			margin-top: calc(var(--arrow-size) + var(--pad));
			position: absolute;
			left: 0;
			right: 0;
			width: auto;
			replace-text('ERROR: You seem to have mistyped the CAPTCHA.', hl-fg);

			br {
				display: none;
			}

			&::before {
				content: '';
				position: absolute;
				display: inline-block;
				top: calc(var(--arrow-size) * -2);
				right: calc((4ch + var(--pad) * 4) / 2);
				border: var(--arrow-size) solid transparent;
				border-bottom: var(--arrow-size) solid var(--hl-error);
			}
		}
	}
	#t {
		&-load, &-resp {
			height: 28px !important;
		}
		&-load {
			normalise-button();
			padding: 0 var(--pad) !important;
			margin-right: var(--pad) !important;
			width: unset !important;
			vertical-align: top !important;
		}
		&-resp {
			text-transform: unset !important;
			padding: 0 var(--pad) !important;
			width: 24ch !important;
		}
	}

	// Name and options in the same line
	input[placeholder="Name"], #qrEmail {
		width: calc(50% - var(--pad)) !important;
		box-sizing: border-box;
	}
	#qrEmail {
		position: absolute;
		top: var(--pad);
		right: var(--pad);
	}

	// Replace the "Choose File" button with "File:"
	/*#quickReply {
		overflow: hidden;
	}
	#qrFile {
		position: absolute;
		left: calc(-85px + 6ch);
		bottom: calc(var(--pad) / 2);
		box(calc(100% - (var(--pad) * 3 + 2ch)), calc(var(--font-size) + 1ch));

		&::before {
			content: '';
			position: absolute;
			background-color: var(--bg3);
			left: 37px;
			box(66px, 100%);
		}

		&::after {
			content: 'File:';
			position: absolute;
			left: calc(44px + var(--border-width) + var(--pad));
			bottom: 0;
		}
	}*/

	/* Panel */
	.panel {
		background-color: var(--bg);
		padding: 0;
		box-shadow: var(--shadow-ins) var(--border), var(--shadow-big);

		&Header {
			brd(bottom);
			margin: 0;
			padding: var(--pad) 0;
			line-height: unset;
		}
	}

	/* Catalog */
	#threads {
		padding: 0;
	}
	.is_catalog .thread {
		background-color: var(--bg3);
		padding: 0;
		margin-top: 0;
		margin-right: var(--pad);
		margin-bottom: var(--pad);
		display: inline-flex;
		flex-direction: column;

		&:hover {
			box-shadow: var(--shadow-big);
			//overflow: unset;
			z-index: 1;
			anim();
		}

		a {
			brd(left); brd(right);
		}
		.thumb {
			box-shadow: none;
			display: block;
		}
	}
	.meta {
		background-color: var(--bg4);
		padding: calc(var(--pad) / 2) 0;
		brd();
		margin: 0;
		line-height: normal;
		order: -1;
	}
	.teaser {
		background-color: var(--bg2);
		padding: var(--pad);
		brd();

		.thread:hover & {
			//border-bottom: none;
		}

		b {
			color: var(--fg2);
		}
	}

	/* etc. */
	a, a:visited, .button {
		color: var(--fg-link) !important;

		&:hover {
			color: var(--fg-link) !important;
			text-decoration: underline;
		}
	}

	.closed {
		color: var(--hl-error) !important;
		font-weight: unset !important;
		padding: 0 !important;
		padding-bottom: calc(var(--pad) * 2) !important;
	}

	#quote-preview {
		box-shadow: var(--shadow-big);
	}

	.op {
		&.preview {
			padding: var(--pad) !important;
		}

		& > .postInfo {
			margin-top: var(--pad);
		}
	}
	.subject {
		color: var(--fg) !important;
		font-weight: unset !important;
	}

	.newPostsMarker:not(#quote-preview) {
		box-shadow: 0 4px var(--color1) !important;
	}

	.fileThumb {
		margin: var(--pad) !important;

		img {
			border-radius: var(--border-radius);
		}

		.op > .file > & {
			margin-left: 0 !important;
		}
		.op.preview & {
			margin-bottom: 0 !important;
		}
	}
	.media-embed {
		margin-top: var(--pad);

		iframe {
			border-radius: var(--border-radius);
		}
	}

	#quote-preview .postNum a,
	#delform .postNum a {
		&[title="Link to this post"] {
			color: transparent !important;
			replace-text('#', fg2);

			&:hover::after {
				color: var(--fg) !important;
			}
		}

		&[title="Reply to this post"] {
			color: var(--fg2) !important;

			&:hover {
				color: var(--fg) !important;
			}
		}
	}

	.post {
		background-color: var(--bg3) !important;
		border: var(--border-width) solid var(--border) !important;
		border-radius: var(--border-radius) !important;
		margin: var(--body-pad) 0 !important;
		padding: 0 !important;
		anim('&:not(.preview), &.highlight');

		@media (max-width: 768px) {
			&:not(.preview) {
				width: 100%;
			}
		}

		&:target, &.highlight {
			background-color: var(--bg3) !important;
			border-color: var(--hl) !important;
		}
		&:target {
			box-shadow: var(--shadow-ins) var(--hl);
		}

		&.preview {
			&.inlined {
				background-color: var(--bg3) !important;
			}

			&:not(.inlined) {
				margin-top: 0 !important;
			}
		}

		&.op {
			border: none !important;
			margin: 0 !important;

			& > blockquote {
				padding-left: 0;
			}
		}

		&:not(.op) {
			.postInfo {
				background-color: var(--bg2);
				brd(bottom);
				padding: var(--pad);
			}

			.fileText {
				padding: var(--pad);
				padding-bottom: 0;

				a:not(:hover) {
					text-decoration: none;
				}
			}
		}

		blockquote {
			margin: 0;
			padding: var(--pad);

			&:empty {
				display: none !important;
			}

			.reply {
				&:first-child {
					margin-top: 0 !important;
				}
				a + ^[1..-1] {
					margin-bottom: 0 !important;
				}
			}
		}
	}

	/* Colors */
	.quote {
		color: var(--color2) !important;
	}
	.deadlink,
	.quoteLink,
	.quotelink:not(.ql-tracked) {
		color: var(--color3) !important;

		a&:hover {
			color: var(--color11) !important;
		}
	}
	.ql-tracked {
		color: var(--color4) !important;

		&:hover {
			color: var(--color12) !important;
		}
	}
	.name {
		color: var(--color5) !important;
		font-weight: unset !important;
	}
	.postertrip {
		color: var(--color1) !important;
	}
	.tu-error {
		color: var(--hl-error);
	}

	/* Syntax highlighting */
	.prettyprint {
		background-color: var(--bg);
		padding: var(--pad) !important;
		border: var(--border-width) solid var(--border) !important;
		display: block;
		resize: horizontal;
	}
	pre + br {
		display: none;
	}
	.prettyprint {
		margin: var(--pad) 0;
	}

	.pun,
	.com {
		color: var(--fg2) !important;
	}
	.fun,
	.kwd {
		color: var(--color9) !important;
	}
	.str,
	.atv {
		color: var(--color10) !important;
	}
	.opn,
	.clo {
		color: var(--color11) !important;
	}
	.typ,
	.atn,
	.dec,
	.var {
		color: var(--color12) !important;
	}
	.tag,
	.lit {
		color: var(--color13) !important;
	}
	.pln {
		color: var(--color14) !important;
	}
}
