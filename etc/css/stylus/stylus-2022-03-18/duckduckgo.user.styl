/* ==UserStyle==
@name           DuckDuckGo
@namespace      github.com/openstyles/stylus
@version        1.0.0
@description    A new userstyle
@author         Me

@preprocessor stylus
==/UserStyle== */

@keyframes dropfade {
	0% {
		opacity: 0;
		transform: translateY(-10px);
	}

	100% {
		opacity: 1;
		transform: translateY(0);
	}
}

$select-size = 16px
$input-h = 28px
$i = !important

// Stylus
svar(var) {
	s('var(--%s)', var);
}

color-a(n, alpha, bright = true) {
	s = bright ? -2 : null;

	s('hsla(var(--color%s-h),	var(--colorscheme-s%s),	var(--colorscheme-l%s), %s)', n, s, s, alpha);
}

// Appearance
bg(n =) {
	background-color: s('var(--bg%s)', n) $i;
}

fg(n =) {
	color: s('var(--fg%s)', n) $i;
}

bgc(n1 =, n2 =) {
	bg(n1);
	fg(n2);
}

hl() {
	background-color: var(--hl) $i;
	color: var(--hl-fg) $i;
}

clr(n) {
	color: s('var(--color%s)', n) $i;
}

pad(pos =, n = 1) {
	{pos ? s('padding-%s', pos) : 'padding'}: \
		n == 0 ? 0 $i : pos == 0 ? 0 $i : var(--pad) $i;
}

mar(pos =, n = 1) {
	{pos ? s('margin-%s', pos) : 'margin'}: \
		n == 0 ? 0 $i : pos == 0 ? 0 $i : var(--pad) $i;
}

brd(pos =, color = border, radius = false) {
	{pos ? s('border-%s', pos) : 'border'}: \
		var(--border-width) solid svar(color) $i;

	if (radius || !pos) {
		border-radius: var(--border-radius) $i;
	}
}

shd(n) {
	box-shadow: s('var(--shadow-%s)', n) $i;
}

// Position
box(w, h = w) {
	width: w $i;
	height: h $i;
}

pos(offset = 0) {
	left: offset $i;
	top: offset $i;
	right: offset $i;
	bottom: offset $i;
}

center() {
	display: flex $i;
	align-items: center $i;
}

// etc.
anim(name =, func = ) {
	@media (prefers-reduced-motion: no-preference) {
		{name ? animation : transition}: name var(--trans-dur) func $i;
	}
}

dropfade() {
	anim(dropfade, cubic-bezier(.2, .9, .6, 1));
}

focus(p = focus) {
	anim();

	&:{p} {
		border-color: var(--hl) $i;
		box-shadow: var(--shadow-ins) var(--hl) $i;
		outline: none $i;
	}
}

replace-text(content =, text-color = fg, pos = after) {
	letter-spacing: -9999px $i;
	color: transparent $i;

	if (content) { // Replace
		&::{pos} {
			content: content $i;
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	} else { // Hide
		* {
			letter-spacing: 0 $i;
			color: svar(text-color) $i;
		}
	}
}

// Input normalisation
normalise-select() {
	appearance: none $i;
	bgc(2)
	background-image:
		linear-gradient(55deg, var(--bg2) 43%, transparent 45%),
		linear-gradient(125deg, transparent 53%, var(--bg2) 55%),
		linear-gradient(180deg, var(--bg2) 30%, var(--fg) 30%) $i;
	background-size: 20px 20px $i;
	background-repeat: no-repeat $i;
	background-position: right 4px $i;
	padding: 0 20px 0 var(--pad) $i;
	brd();
	height: $input-h $i;
	focus();
}

normalise-input() {
	bgc(2);
	padding: 0 var(--pad) $i;
	brd();
	height: $input-h $i;
	focus();

	&::placeholder {
		fg(2);
	}
}

normalise-button() {
	bgc(2);
	padding: 0 calc(var(--pad) * 2) $i;
	brd();
	height: $input-h $i;
	cursor: pointer $i;
	focus();

	&:disabled {
		opacity: .5 $i;
		pointer-events: none $i;
	}
}

normalise-color() {
	bg(2);
	pad(0);
	brd();
	box($select-size);
	focus();

	&::-webkit-color-swatch {
		border: none $i;
		border-radius: calc(var(--border-radius) * .33) $i;

		&-wrapper {
			pad(0);
		}
	}
}

normalise-checkbox(label = true) {
	if (label) {
		/label {
			center();
			gap: 1ch $i;
		}
	}

	appearance: none $i;
	bg(2);
	brd();
	border-radius: calc(var(--border-radius) * .33) $i;
	box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1) $i;
	mar(0);
	position: relative $i;
	box($select-size);
	min-width: $select-size $i;
	focus();

	&::before, &::after {
		content: '';
		position: absolute $i;
		pos();
		background-color: var(--hl) $i;
		transform-origin: 0 0 $i;
	}

	&::before {
		transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0) $i;
	}
	&::after {
		transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(0) $i;
	}
	&:indeterminate::before {
		transform: rotate(0) translateY(37.5%) translateX(10%) scaleX(0.8) scaleY(0.25) $i;
		transition-duration: 33.33333333ms $i;
	}

	&:checked {
		&::before {
			transform: rotate(-45deg) translateY(45%) translateX(-30%) scaleX(0.25) scaleY(0.4) $i;
			transition-duration: 33.33333333ms $i;
		}
	&::after {
			transform: rotate(225deg) translateY(-30%) translateX(-95%) scaleX(0.25) scaleY(1.2) $i;
			transition-delay: 33.33333333ms $i;
			anim();
		}
	}
}

normalise-radio() {
	appearance: none $i;
	bg(2);
	brd();
	border-radius: 50% $i;
	box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1) $i;
	mar(0);
	position: relative $i;
	box($select-size);
	focus();

	&::before {
		content: '';
		position: absolute $i;
		pos(3px);
		background-color: var(--hl) $i;
		border-radius: 50% $i;
		transition: transform var(--trans-dur) linear $i;
		transform: scale(0) $i;
	}
	&:disabled::before {
		background-color: var(--fg3) $i;
	}
	&:checked::before {
		transition-timing-function: cubic-bezier(0, 0, 0.3, 1.5) $i;
		transform: scale(1) $i;
		anim();
	}
}

normalise-header() {
	fg();
	text-transform: uppercase $i;
	letter-spacing: 0.4pt $i;
	padding-top: calc(var(--pad) * 3) $i;
	padding-bottom: calc(var(--pad) * 1.5) $i;
	brd(bottom);
	margin-bottom: calc(var(--pad) * 1.5) $i;
}

@-moz-document domain("html.duckduckgo.com") {
	:root {
		--max-content-width: 480px;
	}

	// Hide elements
	.header__logo-wrap,
	.search__button,
	.feedback-btn,
	.result--ad {
		display: none $i;
	}

	// Global
	.body--html {
		bgc();
		line-height: var(--line-height);
	}
	a {
		color: var(--fg-link) $i;

		&:not(:hover) {
			text-decoration: none;
		}
	}
	input, select, textarea {
		fg();
	}

	// Header
	#header {
		background-color: var(--accent);
		pad();
		brd(bottom, accent-border);
		shd(mid);
		display: flex;
	}
	.header__form {
		text-align: center;
		pad(left, 0);
		margin: auto;
		width: var(--max-content-width);
	}
	.search {
		pad(0);
		border: none;
		box-shadow: none;
		height: $input-h;

		&-wrap--home & {
			bg(2);
		}

		&--header {
			mar(bottom);
			width: unset;
		}

		&__input {
			normalise-input();
			top: 0;
			width: calc(100% - var(--pad) * 2 - var(--border-width) * 2);
			height: 100% $i;
		}
	}
	.frm__select {
		line-height: 1;
		pad(0);
		brd();
		mar(right, 0);
		box(unset, $input-h, true);
		focus();

		&:hover {
			bg(2);
		}

		&::after {
			display: none;
		}

		select {
			normalise-select();
			padding: 0 20px 0 var(--pad);
			box(100%, true);
		}
	}

	// Content
	.serp__results {
		padding: var(--body-pad) $i;
		margin: auto;
		max-width: var(--max-content-width);
	}
	.msg--spelling {
		fg();
		text-align: center;
		pad(0);
		mar(0);
		mar(bottom);

		b::before, b::after {
			content: '"';
		}

		a {
			color: var(--fg-link);
		}
	}
	.zci {
		pad(0);
		margin: auto;
		width: var(--max-content-width);

		&-wrapper {
			bg(2);
			line-height: var(--line-height);
			padding: var(--pad) 0;
			brd(bottom);
		}

		&__heading {
			fg();
			text-align: center;
			pad(bottom);
		}
		&__image {
			padding-left: calc(var(--pad) * 2);
			pad(bottom);
		}
	}
	.results {
		pad(0);
		mar(0);
	}
	.result {
		brd();
		mar(bottom);

		&, &:hover {
			bg(2);
		}

		&__body {
			pad();
		}
		&__a, &__extras, &__icon, &__snippet {
			mar(0);
		}

		&__title {
			mar(bottom);
		}
		&__a {
			line-height: 1;

			&::before {
				content: '';
				position: absolute;
				pos();
				z-index: 1;
			}
		}
		&__type {
			bgc();
			line-height: var(--line-height);
			brd();
			padding: 0 calc(var(--pad) / 2);
			mar(top, 0);
			top: 0;
		}

		&__snippet {
			line-height: var(--line-height);
			display: block;

			&, &:hover, b, strong {
				fg();
			}
		}
		&__extras + .clear::before {
			content: 'No description';
		}
	}
	.nav-link {
		pad(left, 0);
	}
	.btn {
		normalise-button();

		&:hover, &:focus {
			bgc(2);
		}
	}
}
